(function() {
    var type_impls = Object.fromEntries([["euclid",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApproxEq%3CT%3E-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1078-1092\">Source</a><a href=\"#impl-ApproxEq%3CT%3E-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"euclid/approxeq/trait.ApproxEq.html\" title=\"trait euclid::approxeq::ApproxEq\">ApproxEq</a>&lt;T&gt;, Src, Dst&gt; <a class=\"trait\" href=\"euclid/approxeq/trait.ApproxEq.html\" title=\"trait euclid::approxeq::ApproxEq\">ApproxEq</a>&lt;T&gt; for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_epsilon\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1080\">Source</a><a href=\"#method.approx_epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/approxeq/trait.ApproxEq.html#tymethod.approx_epsilon\" class=\"fn\">approx_epsilon</a>() -&gt; T</h4></section></summary><div class='docblock'>Default epsilon value</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_eq_eps\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1082-1091\">Source</a><a href=\"#method.approx_eq_eps\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/approxeq/trait.ApproxEq.html#tymethod.approx_eq_eps\" class=\"fn\">approx_eq_eps</a>(&amp;self, other: &amp;Self, eps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> is this object is approximately equal to the other one, using\na provided epsilon value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/approxeq.rs.html#21-23\">Source</a><a href=\"#method.approx_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"euclid/approxeq/trait.ApproxEq.html#method.approx_eq\" class=\"fn\">approx_eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> is this object is approximately equal to the other one, using\nthe <code>approx_epsilon()</code> epsilon value.</div></details></div></details>","ApproxEq<T>","euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#60-82\">Source</a><a href=\"#impl-Clone-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#61-81\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.84.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1103-1114\">Source</a><a href=\"#impl-Debug-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a> + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1107-1113\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.84.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1094-1101\">Source</a><a href=\"#impl-Default-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1098-1100\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"#method.identity\">identity transform</a>.</p>\n</div></details></div></details>","Default","euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#148-169\">Source</a><a href=\"#impl-Hash-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#151-168\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, h: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.84.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#125-146\">Source</a><a href=\"#impl-PartialEq-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#128-145\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1022-1051\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"num_traits/cast/trait.NumCast.html\" title=\"trait num_traits::cast::NumCast\">NumCast</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1025-1027\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.cast\" class=\"fn\">cast</a>&lt;NewT: <a class=\"trait\" href=\"num_traits/cast/trait.NumCast.html\" title=\"trait num_traits::cast::NumCast\">NumCast</a>&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;NewT, Src, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Cast from one numeric representation to another, preserving the units.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_cast\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1030-1050\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.try_cast\" class=\"fn\">try_cast</a>&lt;NewT: <a class=\"trait\" href=\"num_traits/cast/trait.NumCast.html\" title=\"trait num_traits::cast::NumCast\">NumCast</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;NewT, Src, Dst&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Fallible cast from one numeric representation to another, preserving the units.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1053-1075\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"euclid/approxeq/trait.ApproxEq.html\" title=\"trait euclid::approxeq::ApproxEq\">ApproxEq</a>&lt;T&gt;, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_eq\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1061-1063\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.approx_eq\" class=\"fn\">approx_eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true is this transform is approximately equal to the other one, using\nT’s default epsilon value.</p>\n<p>The same as <a href=\"./approxeq/trait.ApproxEq.html#method.approx_eq\"><code>ApproxEq::approx_eq()</code></a> but available without importing trait.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.approx_eq_eps\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#1072-1074\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.approx_eq_eps\" class=\"fn\">approx_eq_eps</a>(&amp;self, other: &amp;Self, eps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true is this transform is approximately equal to the other one, using\na provided epsilon value.</p>\n<p>The same as <a href=\"./approxeq/trait.ApproxEq.html#method.approx_eq_eps\"><code>ApproxEq::approx_eq_eps()</code></a> but available without importing trait.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#172-263\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_major\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#183-196\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"euclid/struct.Transform3D.html#tymethod.row_major\" class=\"fn\">row_major</a>(\n    m11: T,\n    m12: T,\n    m13: T,\n    m14: T,\n    m21: T,\n    m22: T,\n    m23: T,\n    m24: T,\n    m31: T,\n    m32: T,\n    m33: T,\n    m34: T,\n    m41: T,\n    m42: T,\n    m43: T,\n    m44: T,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a transform specifying its components in row-major order.</p>\n<p>For example, the translation terms m41, m42, m43 on the last row with the\nrow-major convention) are the 13rd, 14th and 15th parameters.</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), then please use <code>column_major</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_major_2d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#208-221\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.row_major_2d\" class=\"fn\">row_major_2d</a>(m11: T, m12: T, m21: T, m22: T, m41: T, m42: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a 4 by 4 transform representing a 2d transformation, specifying its components\nin row-major order:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>m11  m12   0   0\nm21  m22   0   0\n  0    0   1   0\nm41  m42   0   1</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.column_major\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#233-246\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"euclid/struct.Transform3D.html#tymethod.column_major\" class=\"fn\">column_major</a>(\n    m11: T,\n    m21: T,\n    m31: T,\n    m41: T,\n    m12: T,\n    m22: T,\n    m32: T,\n    m42: T,\n    m13: T,\n    m23: T,\n    m33: T,\n    m43: T,\n    m14: T,\n    m24: T,\n    m34: T,\n    m44: T,\n) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a transform specifying its components in column-major order.</p>\n<p>For example, the translation terms m41, m42, m43 on the last column with the\ncolumn-major convention) are the 4th, 8th and 12nd parameters.</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), then please use <code>row_major</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_2d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#252-262\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.is_2d\" class=\"fn\">is_2d</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this transform can be represented with a <code>Transform2D</code>.</p>\n<p>See <a href=\"https://drafts.csswg.org/css-transforms/#2d-transform\">https://drafts.csswg.org/css-transforms/#2d-transform</a></p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#265-420\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_row_major_array\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#273-280\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.to_row_major_array\" class=\"fn\">to_row_major_array</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">[T; 16]</a></h4></section></summary><div class=\"docblock\"><p>Returns an array containing this transform’s terms in row-major order (the order\nin which the transform is actually laid out in memory).</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), then please use <code>to_column_major_array</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_column_major_array\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#288-295\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.to_column_major_array\" class=\"fn\">to_column_major_array</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">[T; 16]</a></h4></section></summary><div class=\"docblock\"><p>Returns an array containing this transform’s terms in column-major order.</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), then please use <code>to_row_major_array</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_row_arrays\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#306-313\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.to_row_arrays\" class=\"fn\">to_row_arrays</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">[T; 4]</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Returns an array containing this transform’s 4 rows in (in row-major order)\nas arrays.</p>\n<p>This is a convenience method to interface with other libraries like glium.</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), then please use <code>to_column_arrays</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_column_arrays\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#324-331\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.to_column_arrays\" class=\"fn\">to_column_arrays</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">[T; 4]</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Returns an array containing this transform’s 4 columns in (in row-major order,\nor 4 rows in column-major order) as arrays.</p>\n<p>This is a convenience method to interface with other libraries like glium.</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), then please use <code>to_row_arrays</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#339-346\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.from_array\" class=\"fn\">from_array</a>(array: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">[T; 16]</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a transform from an array of 16 elements in row-major order.</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), please provide column-major data to this function.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_row_arrays\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#354-361\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.from_row_arrays\" class=\"fn\">from_row_arrays</a>(array: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">[T; 4]</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.array.html\">4</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a transform from 4 rows of 4 elements (row-major order).</p>\n<p>Beware: This library is written with the assumption that row vectors\nare being used. If your matrices use column vectors (i.e. transforming a vector\nis <code>T * v</code>), please provide column-major data to tis function.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_untyped\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#365-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.from_untyped\" class=\"fn\">from_untyped</a>(m: &amp;<a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, <a class=\"struct\" href=\"euclid/struct.UnknownUnit.html\" title=\"struct euclid::UnknownUnit\">UnknownUnit</a>, <a class=\"struct\" href=\"euclid/struct.UnknownUnit.html\" title=\"struct euclid::UnknownUnit\">UnknownUnit</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Tag a unitless value with units.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_untyped\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#376-383\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.to_untyped\" class=\"fn\">to_untyped</a>(&amp;self) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, <a class=\"struct\" href=\"euclid/struct.UnknownUnit.html\" title=\"struct euclid::UnknownUnit\">UnknownUnit</a>, <a class=\"struct\" href=\"euclid/struct.UnknownUnit.html\" title=\"struct euclid::UnknownUnit\">UnknownUnit</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Drop the units, preserving only the numeric value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_source\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#387-394\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.with_source\" class=\"fn\">with_source</a>&lt;NewSrc&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, NewSrc, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the same transform with a different source unit.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_destination\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#398-405\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.with_destination\" class=\"fn\">with_destination</a>&lt;NewDst&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, NewDst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the same transform with a different destination unit.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_2d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#413-419\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.to_2d\" class=\"fn\">to_2d</a>(&amp;self) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform2D.html\" title=\"struct euclid::Transform2D\">Transform2D</a>&lt;T, Src, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Create a 2D transform picking the relevant terms from this transform.</p>\n<p>This method assumes that self represents a 2d transformation, callers\nshould check that <a href=\"#method.is_2d\"><code>self.is_2d()</code></a> returns <code>true</code> beforehand.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#422-491\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.identity\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#435-437\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.identity\" class=\"fn\">identity</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates an identity matrix:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>1 0 0 0\n0 1 0 0\n0 0 1 0\n0 0 0 1</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_skew\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#453-467\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.create_skew\" class=\"fn\">create_skew</a>(alpha: <a class=\"struct\" href=\"euclid/struct.Angle.html\" title=\"struct euclid::Angle\">Angle</a>&lt;T&gt;, beta: <a class=\"struct\" href=\"euclid/struct.Angle.html\" title=\"struct euclid::Angle\">Angle</a>&lt;T&gt;) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/trait.Trig.html\" title=\"trait euclid::Trig\">Trig</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a 2d skew transform.</p>\n<p>See <a href=\"https://drafts.csswg.org/css-transforms/#funcdef-skew\">https://drafts.csswg.org/css-transforms/#funcdef-skew</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_perspective\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#477-490\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.create_perspective\" class=\"fn\">create_perspective</a>(d: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a simple perspective projection transform:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>1   0   0   0\n0   1   0   0\n0   0   1 -1/d\n0   0   0   1</code></pre></div></div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#495-537\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Methods for combining generic transformations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_transform\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#504-526\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.post_transform\" class=\"fn\">post_transform</a>&lt;NewDst&gt;(\n    &amp;self,\n    mat: &amp;<a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Dst, NewDst&gt;,\n) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, NewDst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the multiplication of the two matrices such that mat’s transformation\napplies after self’s transformation.</p>\n<p>Assuming row vectors, this is equivalent to self * mat</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_transform\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#534-536\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.pre_transform\" class=\"fn\">pre_transform</a>&lt;NewSrc&gt;(\n    &amp;self,\n    mat: &amp;<a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, NewSrc, Src&gt;,\n) -&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, NewSrc, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the multiplication of the two matrices such that mat’s transformation\napplies before self’s transformation.</p>\n<p>Assuming row vectors, this is equivalent to mat * self</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#540-582\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods for creating and combining translation transformations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_translation\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#553-563\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.create_translation\" class=\"fn\">create_translation</a>(x: T, y: T, z: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a 3d translation transform:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>1 0 0 0\n0 1 0 0\n0 0 1 0\nx y z 1</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_translate\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#567-572\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.pre_translate\" class=\"fn\">pre_translate</a>(&amp;self, v: <a class=\"struct\" href=\"euclid/struct.Vector3D.html\" title=\"struct euclid::Vector3D\">Vector3D</a>&lt;T, Src&gt;) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a transform with a translation applied before self’s transformation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_translate\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#576-581\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.post_translate\" class=\"fn\">post_translate</a>(&amp;self, v: <a class=\"struct\" href=\"euclid/struct.Vector3D.html\" title=\"struct euclid::Vector3D\">Vector3D</a>&lt;T, Dst&gt;) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a transform with a translation applied after self’s transformation.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#585-637\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a> + <a class=\"trait\" href=\"euclid/trait.Trig.html\" title=\"trait euclid::Trig\">Trig</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods for creating and combining rotation transformations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_rotation\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#591-624\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.create_rotation\" class=\"fn\">create_rotation</a>(x: T, y: T, z: T, theta: <a class=\"struct\" href=\"euclid/struct.Angle.html\" title=\"struct euclid::Angle\">Angle</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a 3d rotation transform from an angle / axis.\nThe supplied axis must be normalized.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_rotate\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#628-630\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.post_rotate\" class=\"fn\">post_rotate</a>(&amp;self, x: T, y: T, z: T, theta: <a class=\"struct\" href=\"euclid/struct.Angle.html\" title=\"struct euclid::Angle\">Angle</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a transform with a rotation applied after self’s transformation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_rotate\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#634-636\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.pre_rotate\" class=\"fn\">pre_rotate</a>(&amp;self, x: T, y: T, z: T, theta: <a class=\"struct\" href=\"euclid/struct.Angle.html\" title=\"struct euclid::Angle\">Angle</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a transform with a rotation applied before self’s transformation.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#640-687\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods for creating and combining scale transformations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#653-663\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.create_scale\" class=\"fn\">create_scale</a>(x: T, y: T, z: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a 3d scale transform:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>x 0 0 0\n0 y 0 0\n0 0 z 0\n0 0 0 1</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pre_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#667-677\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.pre_scale\" class=\"fn\">pre_scale</a>(&amp;self, x: T, y: T, z: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a transform with a scale applied before self’s transformation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.post_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#681-686\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.post_scale\" class=\"fn\">post_scale</a>(&amp;self, x: T, y: T, z: T) -&gt; Self<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a transform with a scale applied after self’s transformation.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#690-807\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Methods for apply transformations to objects</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_point2d_homogeneous\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#700-709\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_point2d_homogeneous\" class=\"fn\">transform_point2d_homogeneous</a>(\n    &amp;self,\n    p: <a class=\"struct\" href=\"euclid/struct.Point2D.html\" title=\"struct euclid::Point2D\">Point2D</a>&lt;T, Src&gt;,\n) -&gt; <a class=\"struct\" href=\"euclid/struct.HomogeneousVector.html\" title=\"struct euclid::HomogeneousVector\">HomogeneousVector</a>&lt;T, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the homogeneous vector corresponding to the transformed 2d point.</p>\n<p>The input point must be use the unit Src, and the returned point has the unit Dst.</p>\n<p>Assuming row vectors, this is equivalent to <code>p * self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_point2d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#718-732\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_point2d\" class=\"fn\">transform_point2d</a>(&amp;self, p: <a class=\"struct\" href=\"euclid/struct.Point2D.html\" title=\"struct euclid::Point2D\">Point2D</a>&lt;T, Src&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"euclid/struct.Point2D.html\" title=\"struct euclid::Point2D\">Point2D</a>&lt;T, Dst&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the given 2d point transformed by this transform, if the transform makes sense,\nor <code>None</code> otherwise.</p>\n<p>The input point must be use the unit Src, and the returned point has the unit Dst.</p>\n<p>Assuming row vectors, this is equivalent to <code>p * self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_vector2d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#740-745\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_vector2d\" class=\"fn\">transform_vector2d</a>(&amp;self, v: <a class=\"struct\" href=\"euclid/struct.Vector2D.html\" title=\"struct euclid::Vector2D\">Vector2D</a>&lt;T, Src&gt;) -&gt; <a class=\"struct\" href=\"euclid/struct.Vector2D.html\" title=\"struct euclid::Vector2D\">Vector2D</a>&lt;T, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the given 2d vector transformed by this matrix.</p>\n<p>The input point must be use the unit Src, and the returned point has the unit Dst.</p>\n<p>Assuming row vectors, this is equivalent to <code>v * self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_point3d_homogeneous\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#753-762\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_point3d_homogeneous\" class=\"fn\">transform_point3d_homogeneous</a>(\n    &amp;self,\n    p: <a class=\"struct\" href=\"euclid/struct.Point3D.html\" title=\"struct euclid::Point3D\">Point3D</a>&lt;T, Src&gt;,\n) -&gt; <a class=\"struct\" href=\"euclid/struct.HomogeneousVector.html\" title=\"struct euclid::HomogeneousVector\">HomogeneousVector</a>&lt;T, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the homogeneous vector corresponding to the transformed 3d point.</p>\n<p>The input point must be use the unit Src, and the returned point has the unit Dst.</p>\n<p>Assuming row vectors, this is equivalent to <code>p * self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_point3d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#771-776\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_point3d\" class=\"fn\">transform_point3d</a>(&amp;self, p: <a class=\"struct\" href=\"euclid/struct.Point3D.html\" title=\"struct euclid::Point3D\">Point3D</a>&lt;T, Src&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"euclid/struct.Point3D.html\" title=\"struct euclid::Point3D\">Point3D</a>&lt;T, Dst&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the given 3d point transformed by this transform, if the transform makes sense,\nor <code>None</code> otherwise.</p>\n<p>The input point must be use the unit Src, and the returned point has the unit Dst.</p>\n<p>Assuming row vectors, this is equivalent to <code>p * self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_vector3d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#784-790\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_vector3d\" class=\"fn\">transform_vector3d</a>(&amp;self, v: <a class=\"struct\" href=\"euclid/struct.Vector3D.html\" title=\"struct euclid::Vector3D\">Vector3D</a>&lt;T, Src&gt;) -&gt; <a class=\"struct\" href=\"euclid/struct.Vector3D.html\" title=\"struct euclid::Vector3D\">Vector3D</a>&lt;T, Dst&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the given 3d vector transformed by this matrix.</p>\n<p>The input point must be use the unit Src, and the returned point has the unit Dst.</p>\n<p>Assuming row vectors, this is equivalent to <code>v * self</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_rect\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#794-806\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.transform_rect\" class=\"fn\">transform_rect</a>(&amp;self, rect: &amp;<a class=\"struct\" href=\"euclid/struct.Rect.html\" title=\"struct euclid::Rect\">Rect</a>&lt;T, Src&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"euclid/struct.Rect.html\" title=\"struct euclid::Rect\">Rect</a>&lt;T, Dst&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a rectangle that encompasses the result of transforming the given rectangle by this\ntransform, if the transform makes sense for it, or <code>None</code> otherwise.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#810-979\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;T, Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;T, Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;T, Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;T, Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a> + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ortho\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#821-836\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.ortho\" class=\"fn\">ortho</a>(left: T, right: T, bottom: T, top: T, near: T, far: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an orthogonal projection transform.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_backface_visible\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#840-848\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.is_backface_visible\" class=\"fn\">is_backface_visible</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Check whether shapes on the XY plane with Z pointing towards the\nscreen transformed by this matrix would be facing back.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_invertible\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#852-854\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.is_invertible\" class=\"fn\">is_invertible</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether it is possible to compute the inverse transform.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverse\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#857-934\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.inverse\" class=\"fn\">inverse</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Dst, Src&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the inverse transform if possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.determinant\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#937-962\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.determinant\" class=\"fn\">determinant</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Compute the determinant of the transform.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_s\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#966-973\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.mul_s\" class=\"fn\">mul_s</a>(&amp;self, x: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Multiplies all of the transform’s component by a scalar and returns the result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_scale\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#976-978\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.from_scale\" class=\"fn\">from_scale</a>(scale: <a class=\"struct\" href=\"euclid/struct.Scale.html\" title=\"struct euclid::Scale\">Scale</a>&lt;T, Src, Dst&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Convenience function to create a scale transform from a <code>Scale</code>.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#981-1020\">Source</a><a href=\"#impl-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"euclid/num/trait.Zero.html\" title=\"trait euclid::num::Zero\">Zero</a> + <a class=\"trait\" href=\"euclid/num/trait.One.html\" title=\"trait euclid::num::One\">One</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.project_to_2d\" class=\"method\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#986-1019\">Source</a><h4 class=\"code-header\">pub fn <a href=\"euclid/struct.Transform3D.html#tymethod.project_to_2d\" class=\"fn\">project_to_2d</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a projection of this transform in 2d space.</p>\n</div></details></div></details>",0,"euclid::default::Transform3D"],["<section id=\"impl-Copy-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#58\">Source</a><a href=\"#impl-Copy-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;</h3></section>","Copy","euclid::default::Transform3D"],["<section id=\"impl-Eq-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/euclid/transform3d.rs.html#123\">Source</a><a href=\"#impl-Eq-for-Transform3D%3CT,+Src,+Dst%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, Src, Dst&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"euclid/struct.Transform3D.html\" title=\"struct euclid::Transform3D\">Transform3D</a>&lt;T, Src, Dst&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","euclid::default::Transform3D"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[69689]}