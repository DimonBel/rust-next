searchState.loadedDescShard("zip", 0, "A library for reading and writing ZIP archives. ZIP is a …\nIdentifies the storage format used to compress a file …\nRepresentation of a moment in time.\nCompress the file using Deflate\nThe compression methods which have been implemented.\nStore the file as is\nUnsupported compression method\nGets the date portion of this datetime in the msdos …\nGet the day\nConstructs an ‘default’ datetime of 1980-01-01 00:00:00\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a DateTime from a specific date and time\nConverts an msdos (u16, u16) pair to a DateTime object\nConverts an u16 to its corresponding CompressionMethod\nGet the hour\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the minute\nGet the month, where 1 = january and 12 = december\nTypes for reading ZIP archives\nError types that can be emitted from this library\nGet the second\nGets the time portion of this datetime in the msdos …\nConverts a CompressionMethod to a u16\nUnstable APIs\nTypes for creating ZIP archives\nGet the year. There is no epoch, i.e. 2018 will be …\nZIP archive reader\nA struct for reading a zip file\nGet a contained file by index\nGet a contained file by index, decrypt with given password\nGet a contained file by index without decompressing it\nSearch for a file entry by name\nSearch for a file entry by name, decrypt with given …\nGet the starting offset of the zip header in the central …\nGet the comment of the file\nGet the comment of the zip archive.\nGet the size of the file, in bytes, in the archive\nGet the compression method used to store the file\nGet the CRC32 hash of the original file\nGet the starting offset of the data of the compressed file\nEnsure the file path is safe to use as a <code>Path</code>.\nGet the extra data of the zip header for this file\nExtract a Zip archive into a directory, overwriting files …\nReturns an iterator over all the file and directory names …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the starting offset of the zip header for this file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap and return the inner reader object\nReturns whether the file is actually a directory\nWhether this zip archive contains no files\nReturns whether the file is a regular file\nGet the time the file was last modified\nNumber of files contained in this zip.\nRewrite the path, ignoring any path components with …\nGet the name of the file\nGet the name of the file, in the raw (internal) byte …\nRead a ZIP archive, collecting the files it contains\nGet the offset from the beginning of the underlying reader …\nRead ZipFile structures from a non-seekable reader.\nGet the name of the file in a sanitized form. It truncates …\nGet the size of the file, in bytes, when uncompressed\nGet unix mode for the file\nGet the version of the file\nError type for time parsing\nContains the error value\nThe requested file could not be found in the archive\nThis file is probably not a zip archive\nThe given password is wrong\nAn Error caused by I/O\nContains the success value\nThe text used as an error when a password is required and …\nThis archive is not supported\nError type for Zip\nGeneric result type with ZipError as its error variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides high level API for reading from a stream.\nTypes for creating ZIP archives.\nAdditional metadata for the file.\nStream decoder for zip.\nVisitor for ZipStreamReader\nGet the comment of the file\nGet the starting offset of the data of the compressed file\nEnsure the file path is safe to use as a <code>Path</code>.\nExtract a Zip archive into a directory, overwriting files …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the file is actually a directory\nReturns whether the file is a regular file\nRewrite the path, ignoring any path components with …\nGet the name of the file\nGet the name of the file, in the raw (internal) byte …\nCreate a new ZipStreamReader\nGet unix mode for the file\nIteraate over the stream and extract all file and their …\nThis function is guranteed to be called after all …\n<code>file</code> - contains the content of the file and most of the …\nUnstable methods for <code>FileOptions</code>.\nWrite the file with the given password using the …\nMetadata for a file to be written\nZIP archive generator\nAdd a directory entry.\nAdd a directory entry, taking a Path as argument.\nAdd a symlink entry.\nSet the compression level for the new file\nSet the compression method for the new file\nConstruct a new FileOptions object\nEnd extra data and start file data. Requires …\nEnd local and start central extra data. Requires …\nFinish the last file and write all other zip-structures\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet whether the new file’s compressed and uncompressed …\nSet the last modified time\nInitializes the archive.\nInitializes the archive from an existing ZIP archive, …\nAdd a new file using the already compressed data from a …\nAdd a new file using the already compressed data from a …\nSet ZIP archive comment.\nSet ZIP archive comment.\nCreate a file in the archive and start writing its’ …\nCreate an aligned file in the archive and start writing its…\nStarts a file, taking a Path as argument.\nCreate a file in the archive and start writing its extra …\nSet the permissions for the new file.")